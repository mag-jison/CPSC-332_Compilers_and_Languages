+--START--+

Token: KEYWORD
Lexeme: while
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<WHILE> -> while <C> do <S> whileend
<C> -> <E> <B>

Token: SEPARATOR
Lexeme: (
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E>

Token: IDENTIFIER
Lexeme: on
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> on
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: )
----------------
<F> -> ( <E> )
<R> -> <empty>
<Q> -> <empty>
<B> -> <empty>

Token: KEYWORD
Lexeme: do
----------------

Token: KEYWORD
Lexeme: if
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<IF> -> if <C> then <S> else <S> endif
<C> -> <E> <B>

Token: IDENTIFIER
Lexeme: lights
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> lights
<R> -> <empty>
<Q> -> <empty>
<B> -> <RELOP> <E> | <empty>

Token: OPERATOR
Lexeme: >
----------------
<RELOP> -> < | <= | == | <> | >= | >

Token: REAL
Lexeme: 7.12
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 7.12
<R> -> <empty>
<Q> -> <empty>

Token: KEYWORD
Lexeme: then
----------------

Token: IDENTIFIER
Lexeme: power
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> power

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: on
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> on
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: KEYWORD
Lexeme: else
----------------

Token: IDENTIFIER
Lexeme: power
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> power

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: off
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> off
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: KEYWORD
Lexeme: endif
----------------

Token: KEYWORD
Lexeme: whileend
----------------

***ACCEPTED*** => while ( on ) do if lights > 7.12 then power = on ; else power = off ; endif whileend 

Token: IDENTIFIER
Lexeme: begin
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<BEGIN> -> begin <S> <MS> end

Token: KEYWORD
Lexeme: if
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<IF> -> if <C> then <S> else <S> endif
<C> -> <E> <B>

Token: IDENTIFIER
Lexeme: on
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> on
<R> -> <empty>
<Q> -> <empty>
<B> -> <empty>

Token: KEYWORD
Lexeme: then
----------------

Token: IDENTIFIER
Lexeme: x
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> x

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: x
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> x
<R> -> <empty>

Token: OPERATOR
Lexeme: +
----------------
<Q> -> + <T> <Q> | - <T> <Q> | <empty>

Token: INTEGER
Lexeme: 45
----------------
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 45
<R> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: KEYWORD
Lexeme: else
----------------

Token: IDENTIFIER
Lexeme: y
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> y

Token: OPERATOR
Lexeme: =
----------------

Token: SEPARATOR
Lexeme: (
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E>

Token: SEPARATOR
Lexeme: (
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E>

Token: IDENTIFIER
Lexeme: y
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> y
<R> -> <empty>

Token: OPERATOR
Lexeme: -
----------------
<Q> -> + <T> <Q> | - <T> <Q> | <empty>

Token: INTEGER
Lexeme: 54
----------------
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 54
<R> -> <empty>

Token: SEPARATOR
Lexeme: )
----------------
<F> -> ( <E> )
<R> -> <empty>

Token: OPERATOR
Lexeme: +
----------------
<Q> -> + <T> <Q> | - <T> <Q> | <empty>

Token: SEPARATOR
Lexeme: (
----------------
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E>

Token: IDENTIFIER
Lexeme: x
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> x
<R> -> <empty>

Token: OPERATOR
Lexeme: +
----------------
<Q> -> + <T> <Q> | - <T> <Q> | <empty>

Token: INTEGER
Lexeme: 56
----------------
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 56
<R> -> <empty>

Token: SEPARATOR
Lexeme: )
----------------
<F> -> ( <E> )
<R> -> <empty>

Token: SEPARATOR
Lexeme: )
----------------
<F> -> ( <E> )
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: KEYWORD
Lexeme: endif
----------------
<MS> -> <empty>

Token: IDENTIFIER
Lexeme: end
----------------

***ACCEPTED*** => begin if on then x = x + 45 ; else y = ( ( y - 54 ) + ( x + 56 ) ) ; endif end 

Token: KEYWORD
Lexeme: float
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<D> -> <TY> <ID> <MORE_IDS> ; | <empty>
<TY> -> bool | int | float

Token: IDENTIFIER
Lexeme: lights
----------------
<ID> -> lights
<MORE_IDS> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => float lights ; 

Token: KEYWORD
Lexeme: bool
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<D> -> <TY> <ID> <MORE_IDS> ; | <empty>
<TY> -> bool | int | float

Token: IDENTIFIER
Lexeme: on
----------------
<ID> -> on

Token: SEPARATOR
Lexeme: ,
----------------
<MORE_IDS> -> , <ID> <MORE_IDS> | <empty>

Token: IDENTIFIER
Lexeme: off
----------------
<ID> -> off

Token: SEPARATOR
Lexeme: ,
----------------
<MORE_IDS> -> , <ID> <MORE_IDS> | <empty>

Token: IDENTIFIER
Lexeme: power
----------------
<ID> -> power
<MORE_IDS> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => bool on , off , power ; 

Token: IDENTIFIER
Lexeme: on
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> on

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: true
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> true
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => on = true ; 

Token: IDENTIFIER
Lexeme: off
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> off

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: false
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> false
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => off = false ; 

Token: IDENTIFIER
Lexeme: power
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> power

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: false
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> false
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => power = false ; 

Token: IDENTIFIER
Lexeme: lights
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> lights

Token: OPERATOR
Lexeme: =
----------------

Token: REAL
Lexeme: 0.0
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 0.0
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => lights = 0.0 ; 

+--FINISH--+