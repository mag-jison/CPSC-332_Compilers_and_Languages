
Token: IDENTIFIER
Lexeme: begin
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<BEGIN> -> begin <S> <MS> end

Token: KEYWORD
Lexeme: if
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<IF> -> if <C> then <S> else <S> endif
<C> -> <E> <RELOP> <E> | <E>

Token: IDENTIFIER
Lexeme: x
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> x
<R> -> <empty>
<Q> -> <empty>

Token: OPERATOR
Lexeme: >
----------------
<RELOP> -> >

Token: IDENTIFIER
Lexeme: y
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> y
<R> -> <empty>
<Q> -> <empty>

Token: KEYWORD
Lexeme: then
----------------

Token: KEYWORD
Lexeme: if
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<IF> -> if <C> then <S> else <S> endif
<C> -> <E> <RELOP> <E> | <E>

Token: IDENTIFIER
Lexeme: y
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> y
<R> -> <empty>
<Q> -> <empty>

Token: OPERATOR
Lexeme: >
----------------
<RELOP> -> >

Token: IDENTIFIER
Lexeme: z
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> z
<R> -> <empty>
<Q> -> <empty>

Token: KEYWORD
Lexeme: then
----------------

Token: IDENTIFIER
Lexeme: max
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> max

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: x
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> x
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: KEYWORD
Lexeme: else
----------------

Token: IDENTIFIER
Lexeme: max
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> max

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: y
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> y
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: KEYWORD
Lexeme: endif
----------------

Token: KEYWORD
Lexeme: else
----------------

Token: IDENTIFIER
Lexeme: max
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> max

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: z
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> z
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: KEYWORD
Lexeme: endif
----------------

Token: SEPARATOR
Lexeme: ;
----------------
<MS> -> ; <S> <MS> | <empty>

Token: KEYWORD
Lexeme: while
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<WHILE> -> while <C> do <S> whileend
<C> -> <E> <RELOP> <E> | <E>

Token: IDENTIFIER
Lexeme: i
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> i
<R> -> <empty>
<Q> -> <empty>

Token: OPERATOR
Lexeme: <
----------------
<RELOP> -> <

Token: IDENTIFIER
Lexeme: arr_length
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> arr_length
<R> -> <empty>
<Q> -> <empty>

Token: KEYWORD
Lexeme: do
----------------

Token: KEYWORD
Lexeme: if
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<IF> -> if <C> then <S> else <S> endif
<C> -> <E> <RELOP> <E> | <E>

Token: IDENTIFIER
Lexeme: curr
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> curr
<R> -> <empty>
<Q> -> <empty>

Token: OPERATOR
Lexeme: >
----------------
<RELOP> -> >

Token: IDENTIFIER
Lexeme: max
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> max
<R> -> <empty>
<Q> -> <empty>

Token: KEYWORD
Lexeme: then
----------------

Token: IDENTIFIER
Lexeme: curr
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> curr

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: max
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> max
<R> -> <empty>

Token: OPERATOR
Lexeme: +
----------------
<Q> -> + <T> <Q> | <empty>

Token: IDENTIFIER
Lexeme: x
----------------
<T> -> <F> <R>
<F> -> <ID>
<ID> -> x
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: KEYWORD
Lexeme: else
----------------

Token: IDENTIFIER
Lexeme: curr
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> curr

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: max
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID>
<ID> -> max
<R> -> <empty>

Token: OPERATOR
Lexeme: -
----------------
<Q> -> - <T> <Q> | <empty>

Token: IDENTIFIER
Lexeme: y
----------------
<T> -> <F> <R>
<F> -> <ID>
<ID> -> y
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: KEYWORD
Lexeme: endif
----------------

Token: KEYWORD
Lexeme: whileend
----------------
<MS> -> <empty>

Token: IDENTIFIER
Lexeme: end
----------------

***ACCEPTED*** => begin if x > y then if y > z then max = x ; else max = y ; endif else max = z ; endif ; while i < arr_length do if curr > max then curr = max + x ; else curr = max - y ; endif whileend end 
