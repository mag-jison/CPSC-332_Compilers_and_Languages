+--START--+

Token: IDENTIFIER
Lexeme: int
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<D> -> <TY> <ID> <MORE_IDS> ; | <empty>
<TY> -> bool | int | float

Token: IDENTIFIER
Lexeme: num
----------------
<ID> -> num

Token: SEPARATOR
Lexeme: ,
----------------
<MORE_IDS> -> , <ID> <MORE_IDS> | <empty>

Token: IDENTIFIER
Lexeme: nu2m
----------------
<ID> -> nu2m

Token: SEPARATOR
Lexeme: ,
----------------
<MORE_IDS> -> , <ID> <MORE_IDS> | <empty>

Token: IDENTIFIER
Lexeme: large$
----------------
<ID> -> large$
<MORE_IDS> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED***

Token: IDENTIFIER
Lexeme: num
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> num

Token: OPERATOR
Lexeme: =
----------------

Token: INTEGER
Lexeme: 0
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 0
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED***

Token: IDENTIFIER
Lexeme: nu2m
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> nu2m

Token: OPERATOR
Lexeme: =
----------------

Token: INTEGER
Lexeme: 15
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 15
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED***

Token: IDENTIFIER
Lexeme: bool
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<D> -> <TY> <ID> <MORE_IDS> ; | <empty>
<TY> -> bool | int | float

Token: IDENTIFIER
Lexeme: hey
----------------
<ID> -> hey
<MORE_IDS> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED***

Token: IDENTIFIER
Lexeme: hey
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> hey

Token: OPERATOR
Lexeme: =
----------------

Token: INTEGER
Lexeme: 1
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 1
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED***

Token: IDENTIFIER
Lexeme: hey
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> hey

Token: OPERATOR
Lexeme: =
----------------

Token: INTEGER
Lexeme: 0
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 0
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED***

Token: IDENTIFIER
Lexeme: if
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<IF> -> if <C> then <S> else <S> endif
<C> -> <E> <B>

Token: IDENTIFIER
Lexeme: num
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> num
<R> -> <empty>
<Q> -> <empty>
<B> -> <RELOP> <E> | <empty>

Token: OPERATOR
Lexeme: >
----------------
<RELOP> -> < | <= | == | <> | >= | >

Token: IDENTIFIER
Lexeme: nu2m
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> nu2m
<R> -> <empty>
<Q> -> <empty>

Token: IDENTIFIER
Lexeme: then
----------------

Token: IDENTIFIER
Lexeme: large$
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> large$

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: num
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> num
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: IDENTIFIER
Lexeme: else
----------------

Token: IDENTIFIER
Lexeme: large$
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> large$

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: nu2m
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> nu2m
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: IDENTIFIER
Lexeme: endif
----------------

***ACCEPTED***

+--FINISH--+
