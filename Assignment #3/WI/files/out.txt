+--START--+

Token: IDENTIFIER
Lexeme: int
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<D> -> <TY> <ID> <MORE_IDS> ; | <empty>
<TY> -> bool | int | float

Token: IDENTIFIER
Lexeme: a
----------------
<ID> -> a

Token: SEPARATOR
Lexeme: ,
----------------
<MORE_IDS> -> , <ID> <MORE_IDS> | <empty>

Token: IDENTIFIER
Lexeme: b
----------------
<ID> -> b

Token: SEPARATOR
Lexeme: ,
----------------
<MORE_IDS> -> , <ID> <MORE_IDS> | <empty>

Token: IDENTIFIER
Lexeme: c
----------------
<ID> -> c
<MORE_IDS> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => int a , b , c ; 

Token: IDENTIFIER
Lexeme: int
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<D> -> <TY> <ID> <MORE_IDS> ; | <empty>
<TY> -> bool | int | float

Token: IDENTIFIER
Lexeme: a
----------------
<ID> -> a
<MORE_IDS> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => int a ; 

Token: IDENTIFIER
Lexeme: begin
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<BEGIN> -> begin <S> <MS> end

Token: IDENTIFIER
Lexeme: if
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<IF> -> if <C> then <S> else <S> endif
<C> -> <E> <B>

Token: IDENTIFIER
Lexeme: a
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> a
<R> -> <empty>
<Q> -> <empty>
<B> -> <RELOP> <E> | <empty>

Token: OPERATOR
Lexeme: >
----------------
<RELOP> -> < | <= | == | <> | >= | >

Token: INTEGER
Lexeme: 3
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 3
<R> -> <empty>
<Q> -> <empty>

Token: IDENTIFIER
Lexeme: then
----------------

Token: IDENTIFIER
Lexeme: alpha
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> alpha

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: sigma
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> sigma

Token: OPERATOR
Lexeme: *
----------------
<R> -> * <F> <R> | / <F> <R> | <empty>

Token: SEPARATOR
Lexeme: (
----------------
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E> )

Token: SEPARATOR
Lexeme: (
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E> )

Token: IDENTIFIER
Lexeme: del
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> del
<R> -> <empty>

Token: OPERATOR
Lexeme: -
----------------
<Q> -> + <T> <Q> | - <T> <Q> | <empty>

Token: IDENTIFIER
Lexeme: rol
----------------
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> rol
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: )
----------------
<F> -> )

Token: OPERATOR
Lexeme: /
----------------
<R> -> * <F> <R> | / <F> <R> | <empty>

Token: IDENTIFIER
Lexeme: beta
----------------
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> beta
<R> -> <empty>
<Q> -> <empty>
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: IDENTIFIER
Lexeme: else
----------------

Token: IDENTIFIER
Lexeme: float
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<D> -> <TY> <ID> <MORE_IDS> ; | <empty>
<TY> -> bool | int | float

Token: IDENTIFIER
Lexeme: d
----------------
<ID> -> d
<MORE_IDS> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: IDENTIFIER
Lexeme: endif
----------------

Token: SEPARATOR
Lexeme: ;
----------------
<MS> -> ; <S> <MS> | <empty>

Token: IDENTIFIER
Lexeme: end
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>

Token: IDENTIFIER
Lexeme: end
----------------

***ACCEPTED*** => begin if a > 3 then alpha = sigma * ( ( del - rol ) / beta ; else float d ; endif ; end 

Token: IDENTIFIER
Lexeme: a
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> a

Token: OPERATOR
Lexeme: =
----------------

Token: INTEGER
Lexeme: 45
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 45
<R> -> <empty>

Token: OPERATOR
Lexeme: +
----------------
<Q> -> + <T> <Q> | - <T> <Q> | <empty>

Token: IDENTIFIER
Lexeme: d
----------------
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> d
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => a = 45 + d ; 

Token: IDENTIFIER
Lexeme: if
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<IF> -> if <C> then <S> else <S> endif
<C> -> <E> <B>

Token: SEPARATOR
Lexeme: (
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E> )

Token: IDENTIFIER
Lexeme: a
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> a

Token: OPERATOR
Lexeme: *
----------------
<R> -> * <F> <R> | / <F> <R> | <empty>

Token: IDENTIFIER
Lexeme: b
----------------
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> b
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: )
----------------
<F> -> )
<R> -> <empty>
<Q> -> <empty>
<B> -> <RELOP> <E> | <empty>

Token: OPERATOR
Lexeme: >
----------------
<RELOP> -> < | <= | == | <> | >= | >

Token: SEPARATOR
Lexeme: (
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E> )

Token: IDENTIFIER
Lexeme: a
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> a
<R> -> <empty>

Token: OPERATOR
Lexeme: +
----------------
<Q> -> + <T> <Q> | - <T> <Q> | <empty>

Token: IDENTIFIER
Lexeme: b
----------------
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> b
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: )
----------------
<F> -> )
<R> -> <empty>
<Q> -> <empty>

Token: IDENTIFIER
Lexeme: then
----------------

Token: IDENTIFIER
Lexeme: c
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> c

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: c
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> c
<R> -> <empty>

Token: OPERATOR
Lexeme: -
----------------
<Q> -> + <T> <Q> | - <T> <Q> | <empty>

Token: INTEGER
Lexeme: 1
----------------
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 1
<R> -> <empty>
<Q> -> <empty>
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> otherwise
<R> -> <empty>
<Q> -> <empty>

***NOT ACCEPTED***

Token: IDENTIFIER
Lexeme: c
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> c

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: c
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> c

Token: OPERATOR
Lexeme: *
----------------
<R> -> * <F> <R> | / <F> <R> | <empty>

Token: INTEGER
Lexeme: 1
----------------
<F> -> <ID> | <NUM> | ( <E> )
<NUM> -> 1
<R> -> <empty>
<Q> -> <empty>

***ACCEPTED*** => c = c * 1 

Token: OPERATOR
Lexeme: %
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>

***ACCEPTED*** => 

+--FINISH--+
