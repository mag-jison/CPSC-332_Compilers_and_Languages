+--START--+

Token: IDENTIFIER
Lexeme: int
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<D> -> <TY> <ID> <MORE_IDS> ; | <empty>
<TY> -> bool | int | float

Token: IDENTIFIER
Lexeme: var
----------------
<ID> -> var

Token: SEPARATOR
Lexeme: ,
----------------
<MORE_IDS> -> , <ID> <MORE_IDS> | <empty>

Token: IDENTIFIER
Lexeme: var2
----------------
<ID> -> var2
<MORE_IDS> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => int var , var2 ; 

Token: IDENTIFIER
Lexeme: bool
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<D> -> <TY> <ID> <MORE_IDS> ; | <empty>
<TY> -> bool | int | float

Token: IDENTIFIER
Lexeme: on
----------------
<ID> -> on

Token: SEPARATOR
Lexeme: ,
----------------
<MORE_IDS> -> , <ID> <MORE_IDS> | <empty>

Token: IDENTIFIER
Lexeme: off
----------------
<ID> -> off
<MORE_IDS> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => bool on , off ; 

Token: IDENTIFIER
Lexeme: float
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<D> -> <TY> <ID> <MORE_IDS> ; | <empty>
<TY> -> bool | int | float

Token: IDENTIFIER
Lexeme: a
----------------
<ID> -> a

Token: SEPARATOR
Lexeme: ,
----------------
<MORE_IDS> -> , <ID> <MORE_IDS> | <empty>

Token: IDENTIFIER
Lexeme: b
----------------
<ID> -> b

Token: SEPARATOR
Lexeme: ,
----------------
<MORE_IDS> -> , <ID> <MORE_IDS> | <empty>

Token: IDENTIFIER
Lexeme: c
----------------
<ID> -> c
<MORE_IDS> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => float a , b , c ; 

Token: IDENTIFIER
Lexeme: var
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> var

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: var2
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> var2
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => var = var2 ; 

Token: IDENTIFIER
Lexeme: on
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> on

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: off
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> off
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

***ACCEPTED*** => on = off ; 

Token: SEPARATOR
Lexeme: (
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E> )

Token: SEPARATOR
Lexeme: (
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E> )

Token: IDENTIFIER
Lexeme: b
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> b
<R> -> <empty>

Token: OPERATOR
Lexeme: +
----------------
<Q> -> + <T> <Q> | - <T> <Q> | <empty>

Token: IDENTIFIER
Lexeme: c
----------------
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> c
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: )
----------------
<F> -> )

Token: OPERATOR
Lexeme: /
----------------
<R> -> * <F> <R> | / <F> <R> | <empty>

Token: SEPARATOR
Lexeme: (
----------------
<F> -> <ID> | <NUM> | ( <E> )
<F> -> ( <E> )

Token: IDENTIFIER
Lexeme: a
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> a

Token: OPERATOR
Lexeme: *
----------------
<R> -> * <F> <R> | / <F> <R> | <empty>

Token: IDENTIFIER
Lexeme: c
----------------
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> c
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: )
----------------
<F> -> )
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: )
----------------
<F> -> )
<R> -> <empty>
<Q> -> <empty>

***ACCEPTED*** => ( ( b + c ) / ( a * c ) ) 

Token: IDENTIFIER
Lexeme: if
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<IF> -> if <C> then <S> else <S> endif
<C> -> <E> <B>

Token: IDENTIFIER
Lexeme: on
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> on
<R> -> <empty>
<Q> -> <empty>
<B> -> <RELOP> <E> | <empty>

Token: OPERATOR
Lexeme: >
----------------
<RELOP> -> < | <= | == | <> | >= | >

Token: IDENTIFIER
Lexeme: off
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> off
<R> -> <empty>
<Q> -> <empty>

Token: IDENTIFIER
Lexeme: then
----------------

Token: IDENTIFIER
Lexeme: var
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> var

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: var2
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> var2
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: IDENTIFIER
Lexeme: else
----------------

Token: IDENTIFIER
Lexeme: on
----------------
<S> -> <A> | <D> | <E> | <IF> | <WHILE> | <BEGIN>
<A> -> <ID> = <E> ;
<ID> -> on

Token: OPERATOR
Lexeme: =
----------------

Token: IDENTIFIER
Lexeme: off
----------------
<E> -> <T> <Q>
<T> -> <F> <R>
<F> -> <ID> | <NUM> | ( <E> )
<ID> -> off
<R> -> <empty>
<Q> -> <empty>

Token: SEPARATOR
Lexeme: ;
----------------

Token: IDENTIFIER
Lexeme: endif
----------------

***ACCEPTED*** => if on > off then var = var2 ; else on = off ; endif 

+--FINISH--+
